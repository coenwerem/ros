# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hello_world/motorDriver.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class motorDriver(genpy.Message):
  _md5sum = "8c45e6bc60f8399dea1a593d7b7b6626"
  _type = "hello_world/motorDriver"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int64 ENABLE_A
int64 ENABLE_B
int64 dir1
int64 dir2 
int64 dir3
int64 dir4 """
  __slots__ = ['ENABLE_A','ENABLE_B','dir1','dir2','dir3','dir4']
  _slot_types = ['int64','int64','int64','int64','int64','int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ENABLE_A,ENABLE_B,dir1,dir2,dir3,dir4

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(motorDriver, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ENABLE_A is None:
        self.ENABLE_A = 0
      if self.ENABLE_B is None:
        self.ENABLE_B = 0
      if self.dir1 is None:
        self.dir1 = 0
      if self.dir2 is None:
        self.dir2 = 0
      if self.dir3 is None:
        self.dir3 = 0
      if self.dir4 is None:
        self.dir4 = 0
    else:
      self.ENABLE_A = 0
      self.ENABLE_B = 0
      self.dir1 = 0
      self.dir2 = 0
      self.dir3 = 0
      self.dir4 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6q().pack(_x.ENABLE_A, _x.ENABLE_B, _x.dir1, _x.dir2, _x.dir3, _x.dir4))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.ENABLE_A, _x.ENABLE_B, _x.dir1, _x.dir2, _x.dir3, _x.dir4,) = _get_struct_6q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6q().pack(_x.ENABLE_A, _x.ENABLE_B, _x.dir1, _x.dir2, _x.dir3, _x.dir4))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.ENABLE_A, _x.ENABLE_B, _x.dir1, _x.dir2, _x.dir3, _x.dir4,) = _get_struct_6q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6q = None
def _get_struct_6q():
    global _struct_6q
    if _struct_6q is None:
        _struct_6q = struct.Struct("<6q")
    return _struct_6q
