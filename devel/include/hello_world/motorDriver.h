// Generated by gencpp from file hello_world/motorDriver.msg
// DO NOT EDIT!


#ifndef HELLO_WORLD_MESSAGE_MOTORDRIVER_H
#define HELLO_WORLD_MESSAGE_MOTORDRIVER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hello_world
{
template <class ContainerAllocator>
struct motorDriver_
{
  typedef motorDriver_<ContainerAllocator> Type;

  motorDriver_()
    : ENABLE_A(0)
    , ENABLE_B(0)
    , dir1(0)
    , dir2(0)
    , dir3(0)
    , dir4(0)  {
    }
  motorDriver_(const ContainerAllocator& _alloc)
    : ENABLE_A(0)
    , ENABLE_B(0)
    , dir1(0)
    , dir2(0)
    , dir3(0)
    , dir4(0)  {
  (void)_alloc;
    }



   typedef int64_t _ENABLE_A_type;
  _ENABLE_A_type ENABLE_A;

   typedef int64_t _ENABLE_B_type;
  _ENABLE_B_type ENABLE_B;

   typedef int64_t _dir1_type;
  _dir1_type dir1;

   typedef int64_t _dir2_type;
  _dir2_type dir2;

   typedef int64_t _dir3_type;
  _dir3_type dir3;

   typedef int64_t _dir4_type;
  _dir4_type dir4;





  typedef boost::shared_ptr< ::hello_world::motorDriver_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hello_world::motorDriver_<ContainerAllocator> const> ConstPtr;

}; // struct motorDriver_

typedef ::hello_world::motorDriver_<std::allocator<void> > motorDriver;

typedef boost::shared_ptr< ::hello_world::motorDriver > motorDriverPtr;
typedef boost::shared_ptr< ::hello_world::motorDriver const> motorDriverConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hello_world::motorDriver_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hello_world::motorDriver_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hello_world::motorDriver_<ContainerAllocator1> & lhs, const ::hello_world::motorDriver_<ContainerAllocator2> & rhs)
{
  return lhs.ENABLE_A == rhs.ENABLE_A &&
    lhs.ENABLE_B == rhs.ENABLE_B &&
    lhs.dir1 == rhs.dir1 &&
    lhs.dir2 == rhs.dir2 &&
    lhs.dir3 == rhs.dir3 &&
    lhs.dir4 == rhs.dir4;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hello_world::motorDriver_<ContainerAllocator1> & lhs, const ::hello_world::motorDriver_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hello_world

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::hello_world::motorDriver_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hello_world::motorDriver_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hello_world::motorDriver_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hello_world::motorDriver_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hello_world::motorDriver_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hello_world::motorDriver_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hello_world::motorDriver_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8c45e6bc60f8399dea1a593d7b7b6626";
  }

  static const char* value(const ::hello_world::motorDriver_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8c45e6bc60f8399dULL;
  static const uint64_t static_value2 = 0xea1a593d7b7b6626ULL;
};

template<class ContainerAllocator>
struct DataType< ::hello_world::motorDriver_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hello_world/motorDriver";
  }

  static const char* value(const ::hello_world::motorDriver_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hello_world::motorDriver_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 ENABLE_A\n"
"int64 ENABLE_B\n"
"int64 dir1\n"
"int64 dir2 \n"
"int64 dir3\n"
"int64 dir4 \n"
;
  }

  static const char* value(const ::hello_world::motorDriver_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hello_world::motorDriver_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ENABLE_A);
      stream.next(m.ENABLE_B);
      stream.next(m.dir1);
      stream.next(m.dir2);
      stream.next(m.dir3);
      stream.next(m.dir4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct motorDriver_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hello_world::motorDriver_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hello_world::motorDriver_<ContainerAllocator>& v)
  {
    s << indent << "ENABLE_A: ";
    Printer<int64_t>::stream(s, indent + "  ", v.ENABLE_A);
    s << indent << "ENABLE_B: ";
    Printer<int64_t>::stream(s, indent + "  ", v.ENABLE_B);
    s << indent << "dir1: ";
    Printer<int64_t>::stream(s, indent + "  ", v.dir1);
    s << indent << "dir2: ";
    Printer<int64_t>::stream(s, indent + "  ", v.dir2);
    s << indent << "dir3: ";
    Printer<int64_t>::stream(s, indent + "  ", v.dir3);
    s << indent << "dir4: ";
    Printer<int64_t>::stream(s, indent + "  ", v.dir4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HELLO_WORLD_MESSAGE_MOTORDRIVER_H
